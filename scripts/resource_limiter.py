"""
Script de test de performance pour programmes C++ avec limitation de ressources
Permet de d√©finir des limites de CPU, RAM et timeout, et mesure les performances
"""

import subprocess
import psutil
import time
import json
import sys
import os
import threading
import platform
from datetime import datetime
from pathlib import Path


class ResourceLimiter:
    """Classe pour ex√©cuter un programme avec des limitations de ressources"""
    
    def __init__(self, executable_path, config_path=None):
        """
        Args:
            executable_path: Chemin vers l'ex√©cutable √† tester
            config_path: Chemin vers le fichier de configuration (optionnel)
        """
        self.executable_path = Path(executable_path)
        self.config = self._load_config(config_path) if config_path else self._default_config()
        
        if not self.executable_path.exists():
            raise FileNotFoundError(f"Executable not found: {self.executable_path}")
    
    def _default_config(self):
        """Configuration par d√©faut
        
        Note: max_cpu_percent est mesur√© par CORE (pas total syst√®me).
        Sur un syst√®me 4 cores:
        - 100% = utilisation compl√®te d'1 core
        - 400% = utilisation compl√®te de tous les cores
        """
        return {
            "timeout_seconds": 10,
            "max_memory_mb": 512,
            "max_cpu_percent": 25,
            "input_file": None,
            "output_file": None,
            "check_interval": 0.1  # Interval de v√©rification en secondes
        }
    
    def _load_config(self, config_path):
        """Charge la configuration depuis un fichier JSON"""
        with open(config_path, 'r') as f:
            config = json.load(f)
        # Merge avec la config par d√©faut
        default = self._default_config()
        default.update(config)
        return default
    
    def _apply_cpu_limits(self, ps_process, verbose):
        """Applique les limites CPU selon le syst√®me d'exploitation"""
        system = platform.system()
        cpu_limit = self.config['max_cpu_percent']
        
        try:
            if system == 'Linux':
                # Sous Linux: Utiliser nice pour r√©duire la priorit√©
                # nice va de -20 (haute priorit√©) √† 19 (basse priorit√©)
                if cpu_limit < 50:
                    nice_value = 10  # Basse priorit√©
                elif cpu_limit < 80:
                    nice_value = 5   # Priorit√© moyennement r√©duite
                else:
                    nice_value = 0   # Priorit√© normale
                
                ps_process.nice(nice_value)
                
                if verbose and nice_value > 0:
                    print(f"üêß Linux: CPU priority reduced (nice={nice_value})")
                
                # Alternative: Utiliser cpulimit si disponible
                # cpulimit_cmd = f"cpulimit -p {ps_process.pid} -l {cpu_limit} &"
                # subprocess.Popen(cpulimit_cmd, shell=True)
                
            elif system == 'Windows':
                # Sous Windows: Utiliser les classes de priorit√©
                if cpu_limit < 50:
                    ps_process.nice(psutil.IDLE_PRIORITY_CLASS)
                    if verbose:
                        print(f"ü™ü Windows: Process priority set to IDLE")
                elif cpu_limit < 80:
                    ps_process.nice(psutil.BELOW_NORMAL_PRIORITY_CLASS)
                    if verbose:
                        print(f"ü™ü Windows: Process priority set to BELOW_NORMAL")
                # Sinon, laisser en NORMAL
                
            elif system == 'Darwin':  # macOS
                # macOS supporte nice comme Linux
                if cpu_limit < 50:
                    ps_process.nice(10)
                elif cpu_limit < 80:
                    ps_process.nice(5)
                    
        except (psutil.NoSuchProcess, psutil.AccessDenied, PermissionError) as e:
            if verbose:
                print(f"‚ö†Ô∏è  Cannot set CPU limits: {e}")
    
    def run_with_limits(self, input_data=None, verbose=True):
        """
        Ex√©cute le programme avec les limitations configur√©es
        
        Args:
            input_data: Donn√©es d'entr√©e (str) ou chemin vers un fichier
            verbose: Afficher les informations d√©taill√©es
            
        Returns:
            dict: R√©sultats de l'ex√©cution avec m√©triques
        """
        results = {
            "success": False,
            "timeout": False,
            "memory_exceeded": False,
            "cpu_exceeded": False,
            "execution_time": 0,
            "max_memory_used_mb": 0,
            "avg_cpu_percent": 0,
            "return_code": None,
            "stdout": "",
            "stderr": "",
            "error": None
        }
        
        try:
            # Pr√©parer l'entr√©e
            stdin_data = self._prepare_input(input_data)
            
            # D√©marrer le processus
            start_time = time.time()
            
            process = subprocess.Popen(
                [str(self.executable_path)],
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # CORRECTION: G√©rer stdin/stdout/stderr dans des threads pour √©viter les deadlocks
            # Les pipes ont une taille limit√©e - si on ne lit pas, le programme se bloque!
            stdout_data = []
            stderr_data = []
            
            def write_stdin():
                try:
                    if stdin_data:
                        process.stdin.write(stdin_data)
                        process.stdin.flush()
                    process.stdin.close()
                except (BrokenPipeError, OSError):
                    pass
            
            def read_stdout():
                try:
                    for line in process.stdout:
                        stdout_data.append(line)
                except:
                    pass
            
            def read_stderr():
                try:
                    for line in process.stderr:
                        stderr_data.append(line)
                except:
                    pass
            
            # D√©marrer les threads
            stdin_thread = threading.Thread(target=write_stdin)
            stdout_thread = threading.Thread(target=read_stdout)
            stderr_thread = threading.Thread(target=read_stderr)
            
            stdin_thread.daemon = True
            stdout_thread.daemon = True
            stderr_thread.daemon = True
            
            stdin_thread.start()
            stdout_thread.start()
            stderr_thread.start()
            
            # Obtenir l'objet psutil pour monitorer les ressources
            try:
                ps_process = psutil.Process(process.pid)
            except psutil.NoSuchProcess:
                results["error"] = "Process terminated immediately"
                return results
            
            # Monitoring des ressources
            memory_samples = []
            cpu_samples = []
            cpu_exceeded_count = 0  # Compteur pour √©viter les faux positifs
            
            # Appliquer les limites CPU selon le syst√®me d'exploitation
            self._apply_cpu_limits(ps_process, verbose)
            
            if verbose:
                num_cores = psutil.cpu_count(logical=True)
                print(f"üöÄ Starting process (PID: {process.pid})...")
                print(f"‚è±Ô∏è  Timeout: {self.config['timeout_seconds']}s")
                print(f"üíæ Max Memory: {self.config['max_memory_mb']} MB")
                print(f"üñ•Ô∏è  Max CPU: {self.config['max_cpu_percent']}% per core (System: {num_cores} cores)")
                print("-" * 60)
            
            # Boucle de monitoring
            while True:
                # V√©rifier si le processus est termin√©
                if process.poll() is not None:
                    break
                
                # V√©rifier le timeout
                elapsed = time.time() - start_time
                if elapsed > self.config['timeout_seconds']:
                    results["timeout"] = True
                    process.terminate()
                    try:
                        process.wait(timeout=2)
                    except subprocess.TimeoutExpired:
                        process.kill()
                    if verbose:
                        print(f"‚è∞ TIMEOUT after {elapsed:.2f}s")
                    break
                
                # Mesurer les ressources
                try:
                    # M√©moire
                    mem_info = ps_process.memory_info()
                    memory_mb = mem_info.rss / (1024 * 1024)
                    memory_samples.append(memory_mb)
                    
                    # CPU (n√©cessite un intervalle pour √™tre pr√©cis)
                    cpu_percent = ps_process.cpu_percent(interval=None)
                    if cpu_percent > 0:  # Ignorer les valeurs nulles initiales
                        cpu_samples.append(cpu_percent)
                    
                    # V√©rifier les limites de m√©moire
                    if memory_mb > self.config['max_memory_mb']:
                        results["memory_exceeded"] = True
                        process.terminate()
                        try:
                            process.wait(timeout=2)
                        except subprocess.TimeoutExpired:
                            process.kill()
                        if verbose:
                            print(f"üí• MEMORY LIMIT EXCEEDED: {memory_mb:.2f} MB")
                        break
                    
                    # V√©rifier et limiter le CPU
                    # Note: La limitation stricte du CPU sous Windows est complexe
                    # On utilise une approche de "kill si d√©passement prolong√©"
                    if cpu_percent > self.config['max_cpu_percent'] * 1.5:  # Tol√©rance de 50%
                        cpu_exceeded_count += 1
                        if cpu_exceeded_count >= 10:  # 10 √©chantillons cons√©cutifs = 1 seconde
                            results["cpu_exceeded"] = True
                            process.terminate()
                            try:
                                process.wait(timeout=2)
                            except subprocess.TimeoutExpired:
                                process.kill()
                            if verbose:
                                print(f"üí• CPU LIMIT EXCEEDED: {cpu_percent:.1f}% > {self.config['max_cpu_percent']}%")
                            break
                    else:
                        cpu_exceeded_count = 0  # Reset si le CPU redescend
                    
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    break
                
                time.sleep(self.config['check_interval'])
            
            # Attendre la fin des threads de lecture
            stdout_thread.join(timeout=2)
            stderr_thread.join(timeout=2)
            
            # R√©cup√©rer les donn√©es lues par les threads
            results["stdout"] = ''.join(stdout_data)
            results["stderr"] = ''.join(stderr_data)
            
            # Calculer les m√©triques
            results["execution_time"] = time.time() - start_time
            results["return_code"] = process.returncode
            
            if memory_samples:
                results["max_memory_used_mb"] = max(memory_samples)
            
            if cpu_samples:
                results["avg_cpu_percent"] = sum(cpu_samples) / len(cpu_samples)
            
            # D√©terminer le succ√®s
            results["success"] = (
                process.returncode == 0 and
                not results["timeout"] and
                not results["memory_exceeded"]
            )
            
            if verbose:
                self._print_results(results)
            
            # √âcrire stdout dans un fichier si sp√©cifi√©
            if results["success"] and self.config.get('output_file'):
                output_path = self.config['output_file']
                with open(output_path, 'w') as f:
                    f.write(results["stdout"])
                if verbose:
                    print(f"üìÑ Output written to: {output_path}")
            
        except Exception as e:
            results["error"] = str(e)
            if verbose:
                print(f"‚ùå Error: {e}")
        
        return results
    
    def _prepare_input(self, input_data):
        """Pr√©pare les donn√©es d'entr√©e"""
        if input_data is None:
            # Utiliser le fichier d'entr√©e de la config si sp√©cifi√©
            if self.config.get('input_file'):
                with open(self.config['input_file'], 'r') as f:
                    return f.read()
            return None
        
        # Si c'est un chemin de fichier
        if isinstance(input_data, (str, Path)) and Path(input_data).exists():
            with open(input_data, 'r') as f:
                return f.read()
        
        # Sinon, traiter comme une cha√Æne
        return str(input_data)
    
    def _print_results(self, results):
        """Affiche les r√©sultats de mani√®re format√©e"""
        print("-" * 60)
        print("üìä RESULTS:")
        print(f"  ‚úì Success: {results['success']}")
        print(f"  ‚è±Ô∏è  Execution Time: {results['execution_time']:.3f}s")
        print(f"  üíæ Max Memory Used: {results['max_memory_used_mb']:.2f} MB")
        print(f"  üñ•Ô∏è  Avg CPU: {results['avg_cpu_percent']:.1f}%")
        print(f"  üî¢ Return Code: {results['return_code']}")
        
        if results['timeout']:
            print("  ‚è∞ TIMEOUT!")
        if results['memory_exceeded']:
            print("  üí• MEMORY LIMIT EXCEEDED!")
        if results['error']:
            print(f"  ‚ùå Error: {results['error']}")
        
        print("-" * 60)
    
    def save_results(self, results, output_path):
        """Sauvegarde les r√©sultats dans un fichier JSON"""
        results_with_metadata = {
            "timestamp": datetime.now().isoformat(),
            "executable": str(self.executable_path),
            "config": self.config,
            "results": results
        }
        
        with open(output_path, 'w') as f:
            json.dump(results_with_metadata, f, indent=2)
        
        print(f"üíæ Results saved to: {output_path}")


def main():
    """Exemple d'utilisation"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Test C++ program with resource limits")
    parser.add_argument("executable", help="Path to the executable")
    parser.add_argument("-c", "--config", help="Path to config file (JSON)")
    parser.add_argument("-i", "--input", help="Path to input file")
    parser.add_argument("-O", "--output-file", help="Path to write program stdout")
    parser.add_argument("-o", "--output", help="Path to save results (JSON)")
    parser.add_argument("-t", "--timeout", type=float, help="Timeout in seconds")
    parser.add_argument("-m", "--memory", type=int, help="Max memory in MB")
    parser.add_argument("--cpu", type=int, help="Max CPU percent")
    
    args = parser.parse_args()
    
    # Cr√©er le limiter
    limiter = ResourceLimiter(args.executable, args.config)
    
    # Override config with command line arguments
    if args.timeout is not None:
        limiter.config['timeout_seconds'] = args.timeout
    if args.memory is not None:
        limiter.config['max_memory_mb'] = args.memory
    if args.cpu is not None:
        limiter.config['max_cpu_percent'] = args.cpu
    if args.input is not None:
        limiter.config['input_file'] = args.input
    if args.output_file is not None:
        limiter.config['output_file'] = args.output_file
    
    # Ex√©cuter
    results = limiter.run_with_limits()
    
    # Sauvegarder si demand√©
    if args.output:
        limiter.save_results(results, args.output)
    
    # Code de sortie bas√© sur le succ√®s
    sys.exit(0 if results['success'] else 1)


if __name__ == "__main__":
    main()
